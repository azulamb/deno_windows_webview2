import data from '../deno.json' with { type: 'json' };
const VERSION = data.version;
const DLL_VERSION = data.dll_version;
const IMPORT_SRC = new URL(import.meta.resolve('../webview2/packages.config'));
const EXPORT_VERSION = new URL(import.meta.resolve('../src/version.ts'));
const README_SRC = new URL(import.meta.resolve('../README.md'));

async function parse(src: URL) {
  const packages: {
    name: string;
    version: string;
  }[] = [];

  const lines = (await Deno.readTextFile(src))
    .replace(/\r\n/g, '\n')
    .split('\n');
  for (const line of lines) {
    if (line.trim().match(/^<package /)) {
      // <package id="Microsoft.Web.WebView2" version="1.0.1661.34" targetFramework="native" />
      const name = (<RegExpMatchArray> line.match(/id="([^"]+)"/))[1];
      const version = (<RegExpMatchArray> line.match(/version="([^"]+)"/))[1];
      if (!name || !version) {
        continue;
      }
      packages.push({
        name: name,
        version: version,
      });
    }
  }

  return packages;
}

const packages = await parse(IMPORT_SRC);

await Deno.writeTextFile(
  EXPORT_VERSION,
  [
    '// Generated by deno task version',
    '/** The version of the Deno Webview2 module. */',
    `export const Deno_Webview2 = '${VERSION}';`,
    '/** The version of the webview2.dll. */',
    `export const Dll = '${DLL_VERSION}';`,
    ...packages.map((data) => {
      return `/** The version of the ${data.name} package. */
export const ${data.name.replaceAll('.', '_')} = '${data.version}';`;
    }),
  ].join('\n') + '\n',
);

const readme = await Deno.readTextFile(README_SRC);

const [before, tmp] = readme.split(/### Versions/, 2);
const after = tmp.split(/### File/, 2)[1];
const versions = packages.map((p) => {
  return `* ${p.name}\n  * \`${p.version}\``;
}).join('\n');

await Deno.writeTextFile(
  README_SRC,
  [
    before.trim(),
    '\n### Versions\n',
    versions,
    '\n### File\n',
    after.trim(),
  ].join('\n') + '\n',
);
